{"version":3,"sources":["components/StadiumWiseTeamPerformance/index.js","components/CustomPopup/index.js","components/TeamWinLossData/index.js","components/MatchPlayedPerStadium/index.js","components/TossWinMatchWin/index.js","components/TeamWin/index.js","components/TeamMatchWiseScores/index.js","components/BestTeamPerformance/index.js","components/BatsmanPerformance/index.js","components/TopTenBatsman/index.js","components/BowlerPerformance/index.js","components/TopTenBowler/index.js","components/StatisticalData/index.js","pages/Dashboard/index.js","helperFunctions/index.js","App.js","serviceWorker.js","themes/index.js","index.js"],"names":["StadiumWiseTeamPerformance","props","useState","stadiumMatches","setStadiumMatches","useEffect","_","isEmpty","data","teamWinLoss","i","length","opponent","Opponent_Team_Id","team","Team_Name_Id","Match_Winner_Id","valTeam","get","ValOpponent","teamList","Object","keys","winArray","lossArray","forEach","row","push","wins","losses","series","name","options","chart","type","stacked","plotOptions","bar","horizontal","stroke","width","colors","title","text","xaxis","categories","labels","formatter","val","yaxis","tooltip","y","fill","opacity","legend","position","horizontalAlign","offsetX","responsive","breakpoint","Grid","container","justify","height","useStyles","makeStyles","theme","flex1","flex","CustomDialog","classes","Dialog","fullWidth","maxWidth","open","onClose","handleClose","alignItems","item","className","DialogTitle","id","titleText","Divider","DialogContent","DialogContentText","children","DialogActions","Button","onClick","color","autoFocus","table","borderBottom","fontWeight","fontSize","borderRight","padding","lineHeight","border","boxShadow","cells","TeamWinLossData","matchId","match","teamStats","teamStats1","loses","teamPerformance","toFixed","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","hover","key","smDown","breakpoints","down","paddingTop","spacing","MatchPlayedPerStadium","stadium","setStadium","stadiumName","setStadiumName","openPopup","setOpenPopup","stadiumWiseMatches","array","reduce","objectsByKeyValue","obj","value","concat","stadiumNames","show","pie","donut","size","events","dataPointSelection","event","chartContext","config","undefined","dataPointIndex","xl","lg","md","sm","xs","Typography","variant","CustomPopup","TossWinMatchWin","tossData","winner","Toss_Winner_Id","teamId","Toss_Decision","field","bat","batArray","fieldArray","markers","itemMargin","heigth","TeamWin","seasonMatches","setSeasonMatches","winsArray","vertical","TeamMatchWiseScores","matches","teamScorePerMatch","zoom","enabled","dataLabels","curve","grid","BestTeamPerformance","selectedTeam","setSelectedTeam","selectedTeamScores","setSelectedTeamScores","teamsList","teamMatchRuns","averageTeamScores","teamsAllMatchScore","scoreByMatch","matchData","runs","extras","a","b","click","BatsmanPerformance","strikeRate","fours","sixes","balls","columnWidth","endingShape","TopTenBatsman","batsmanNames","batsmanData","selectedPlayer","setSelectedPlayer","selectedPlayerMatchdata","setSelectedPlayerMatchData","batsmanAverageRunAndStrikeRate","batsman","battingDataByPlayer","runScoredByPlayer","strikeRateByPlayer","battingDataByPlayerAndMatch","sortBy","o","parseInt","topTenId","topTenRuns","topTenStrikeRate","playerId","toolbar","tools","zoomin","zoomout","pan","reset","download","gradient","opacityFrom","opacityTo","offsetY","BowlerPerformance","economies","overs","wickets","display","TopTenBowler","bowlerNames","bowlerData","BowlerAverageEconomyAndWicket","bowler","bowlingDataByPlayer","bowlingEconomy","bowlingDataByPlayerAndMatch","sort","topTenEconomy","topTenWicket","dropShadow","top","left","blur","borderColor","min","max","backgroundColor","borderRadius","flexBasis","justifyContent","flexDirection","justifySpaceBetween","marginBottom","h3","letterSpacing","body2","marginTop","StatisticalData","teamIds","minTeamScore","maxTeamScore","teamData","matchScoreByTeam","batsmanIds","maxScore","matchScoreByPlayer","bowlerIds","maxWickets","matchWicketsByPlayer","classnames","margin","mdToXl","smToXs","up","xsplus","xsDown","textColor","background","paddingBottom","xsJustify","paperBackground","elevation","fullCard","root","formControl","removePadding","remove","select","minWidth","paddingLeft","buttonGroup","yearData","Dashboard","matchCount","teamwiseBatting","batsmanScoreByMatch","bowlerWicketsAndDeliveriesByMatch","season","setSeason","yearToSeason","seasonKey","entries","matchDataByYear","Season_Id","Match_Id","allMatches","ballData","runScored","isNaN","extraRun","extraType","wicketTaken","teamRun","Team_Batting_Id","strikerPerformance","Striker_Id","bowlerPerformance","Bowler_Id","matchRun","strikerPerformanceByMatch","bowlerPerformanceByMatch","DataCalculater","backgroundImage","ToggleButtonGroup","exclusive","onChange","e","target","textContent","index","ToggleButton","FormControl","InputLabel","Select","labelId","MenuItem","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","lightTheme","createMuiTheme","button","palette","white","main","highlightedBlue","primary","light","dark","secondary","almostBlack","subText","typography","fontFamily","join","responsiveFontSizes","ReactDOM","render","StrictMode","ThemeProvider","themes","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7c268f92.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport default function StadiumWiseTeamPerformance(props){\r\n\r\n    const [stadiumMatches, setStadiumMatches] = useState([])\r\n    useEffect(() => {\r\n        if(!_.isEmpty(props.data)){\r\n            setStadiumMatches(props.data)\r\n        }\r\n    }, [props.data])\r\n    let teamWinLoss = {}\r\n    for(let i=0; i<stadiumMatches.length; i++){\r\n        let opponent = stadiumMatches[i].Opponent_Team_Id\r\n        let team = stadiumMatches[i].Team_Name_Id\r\n        let winner = stadiumMatches[i].Match_Winner_Id\r\n        if(team === winner){\r\n            let valTeam = _.get(teamWinLoss, team, '-')\r\n            let ValOpponent = _.get(teamWinLoss, opponent, '-')\r\n            if(valTeam !== '-'){\r\n                teamWinLoss[team] = {...teamWinLoss[team], 'wins': _.get(teamWinLoss[team], 'wins', 0) + 1}\r\n            } else {\r\n                teamWinLoss[team] = {'wins': 1, 'losses': 0}\r\n            }\r\n            if(ValOpponent !== '-'){\r\n                teamWinLoss[opponent] = {...teamWinLoss[opponent], 'losses': _.get(teamWinLoss[opponent], 'losses', 0) + 1}\r\n            } else {\r\n                teamWinLoss[opponent] = {'wins': 0, 'losses': 1}\r\n            }\r\n        } else {\r\n            let valTeam = _.get(teamWinLoss, team, '-')\r\n            let ValOpponent = _.get(teamWinLoss, opponent, '-')\r\n            if(valTeam !== '-'){\r\n                teamWinLoss[team] = {...teamWinLoss[team], 'losses': _.get(teamWinLoss[team], 'losses', 0) + 1}\r\n            } else {\r\n                teamWinLoss[team] = {'wins': 0, 'losses': 1}\r\n            }\r\n            if(ValOpponent !== '-'){\r\n                teamWinLoss[opponent] = {...teamWinLoss[opponent], 'wins': _.get(teamWinLoss[opponent], 'wins', 0) + 1}\r\n            } else {\r\n                teamWinLoss[opponent] = {'wins': 1, 'losses': 0}\r\n            }\r\n        }\r\n    }\r\n    \r\n    let teamList = Object.keys(teamWinLoss)\r\n    let winArray = []\r\n    let lossArray = []\r\n    teamList.forEach(row => {\r\n        winArray.push(teamWinLoss[row].wins)\r\n        lossArray.push(teamWinLoss[row].losses)\r\n    })\r\n    \r\n\r\n    let series = [{ name: 'Wins', data: winArray}, \r\n                 {name: 'Losses', data: lossArray}]\r\n    let options = {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n          },\r\n        },\r\n        stroke: {\r\n          width: 1,\r\n          colors: ['#fff']\r\n        },\r\n        title: {\r\n          text: 'Win-Loss Graph Of Teams'\r\n        },\r\n        xaxis: {\r\n          categories: teamList,\r\n          labels: {\r\n            formatter: function (val) {\r\n              return val\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Match Count'\r\n          },\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Teams'\r\n          },\r\n        },\r\n        tooltip: {\r\n          y: {\r\n            formatter: function (val) {\r\n              return val\r\n            }\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 1\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n          horizontalAlign: 'left',\r\n          offsetX: 40\r\n        },\r\n        responsive: [{\r\n          breakpoint: 960,\r\n          options: {\r\n            chart: {\r\n              width: 500,\r\n            }\r\n          },\r\n        },{\r\n          breakpoint: 600,\r\n          options: {\r\n            chart: {\r\n              width: 300,\r\n            }\r\n          },\r\n        }]\r\n      }\r\n    \r\n    \r\n    return (\r\n        <>\r\n          <Grid container justify='center'>\r\n              <ReactApexChart options={options} series={series} type=\"bar\" height={350} width={600}/>\r\n          </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Grid, makeStyles, Divider } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    flex1: {\r\n        flex: 1,\r\n    },\r\n}))\r\n\r\nfunction CustomDialog(props){\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                fullWidth={props.fullWidth}\r\n                maxWidth={props.maxWidth}\r\n                open={props.open}\r\n                onClose={props.handleClose}\r\n            >\r\n                <Grid container alignItems='center'>\r\n                    <Grid item className={classes.flex1}>\r\n                        <DialogTitle id=\"title\">{props.titleText}</DialogTitle>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <DialogContent>\r\n                <DialogContentText>\r\n                    {props.children}\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions>\r\n                    <Button onClick={props.handleClose} color=\"primary\" autoFocus>\r\n                        {'Close'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomDialog","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    '& thead th': {\r\n      borderBottom: '1px solid rgba(0,0,0,0.12)',\r\n      color: 'rgba(0,0,0,0.9)',\r\n      fontWeight: 600,\r\n      fontSize: '1rem',\r\n      '&:not(:last-of-type)': {\r\n        borderRight: '1px solid rgba(0,0,0,0.12)',\r\n      }\r\n    },\r\n    '& th': {\r\n        padding: '8px',\r\n    },\r\n    '& td': {\r\n        lineHeight: .8,\r\n        padding: '12px',\r\n    },\r\n    '& tbody tr:last-of-type': {\r\n      borderBottom: 0,\r\n    },\r\n    '& tr td:last-of-type' : {\r\n      borderRight: 0,\r\n    },\r\n  },\r\n  container: {\r\n    border: '0.1px solid rgba(0,0,0,0.12)',\r\n    boxShadow: '0 1px 1px 0 rgba(66, 66, 66, 0.08), 0 1px 3px 0px rgba(66, 66, 66, 0.16)',\r\n    borderBottom: 0\r\n  },\r\n  cells: {\r\n    border: '1px solid rgba(0,0,0,0.12)',\r\n  },\r\n});\r\n\r\n\r\nexport default function TeamWinLossData(props) {\r\n  const classes = useStyles();\r\n\r\n  let matchId = Object.keys(props.data)\r\n\r\n  let teamWinLoss = []\r\n  matchId.forEach( match => {\r\n    let opponent = _.get(props.data, match, '-').Opponent_Team_Id\r\n    let team = _.get(props.data, match, '-').Team_Name_Id\r\n    let winner = _.get(props.data, match, '-').Match_Winner_Id\r\n    if(opponent === winner){\r\n      let teamStats = _.get(teamWinLoss, opponent, '-')\r\n      let teamStats1 = _.get(teamWinLoss, team, '-')\r\n      if(teamStats !== '-'){\r\n        teamWinLoss[opponent] = {...teamStats, wins: teamStats.wins + 1}\r\n      } else {\r\n        teamWinLoss[opponent] = {wins: 1, loses: 0}\r\n      }\r\n      if(teamStats1 !== '-'){\r\n        teamWinLoss[team] = {...teamStats1, loses: teamStats1.loses + 1}\r\n      } else {\r\n        teamWinLoss[team] = {wins: 0, loses: 1}\r\n      }\r\n    } else {\r\n      let teamStats = _.get(teamWinLoss, opponent, '-')\r\n      let teamStats1 = _.get(teamWinLoss, team, '-')\r\n      if(teamStats !== '-'){\r\n        teamWinLoss[opponent] = {...teamStats, loses: teamStats.loses + 1}\r\n      } else {\r\n        teamWinLoss[opponent] = {loses: 1, wins: 0}\r\n      }\r\n      if(teamStats1 !== '-'){\r\n        teamWinLoss[team] = {...teamStats1, wins: teamStats1.wins + 1}\r\n      } else {\r\n        teamWinLoss[team] = {loses: 0, wins: 1}\r\n      }\r\n    }\r\n  })\r\n\r\n  let teamList = Object.keys(teamWinLoss)\r\n  let teamPerformance = []\r\n  teamList.forEach(team => {\r\n    teamPerformance.push([team, teamWinLoss[team]['wins'], teamWinLoss[team]['loses'], ((teamWinLoss[team]['wins']/(teamWinLoss[team]['wins']+teamWinLoss[team]['loses']))*100).toFixed(2)])\r\n  })\r\n\r\n  return (\r\n        <TableContainer className={classes.container} component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                <TableRow>\r\n                    <TableCell align='center'>Team ID</TableCell>\r\n                    <TableCell align=\"center\">Wins</TableCell>\r\n                    <TableCell align=\"center\">Loses</TableCell>\r\n                    <TableCell align=\"center\">Win (%)</TableCell>\r\n                </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {teamPerformance.map((row) => (\r\n                    <TableRow hover key={row[0]}>\r\n                      <TableCell className={classes.cells} align='center'>{row[0]}</TableCell>\r\n                      <TableCell className={classes.cells} align=\"center\">{row[1]}</TableCell>\r\n                      <TableCell className={classes.cells} align=\"center\">{row[2]}</TableCell>\r\n                      <TableCell className={classes.cells} align=\"center\">{row[3]}</TableCell>\r\n                    </TableRow>\r\n                ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n  );\r\n}","import React, { useState } from 'react'\r\nimport { Grid, Typography, makeStyles } from '@material-ui/core'\r\nimport Chart from 'react-apexcharts'\r\n\r\nimport StadiumWiseTeamPerformance from '../StadiumWiseTeamPerformance'\r\nimport CustomPopup from '../CustomPopup'\r\nimport TeamWinLossData from '../TeamWinLossData'\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    smDown: {\r\n        [theme.breakpoints.down('md')]: {\r\n            paddingTop: theme.spacing(3),\r\n          }\r\n    }\r\n}))\r\n\r\nconst groupBy = key => array =>\r\n  array.reduce((objectsByKeyValue, obj) => {\r\n    const value = obj[key];\r\n    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\r\n    return objectsByKeyValue;\r\n  }, {});\r\n\r\nexport default function MatchPlayedPerStadium(props){\r\n    const classes = useStyles()\r\n    const [stadium, setStadium] = useState('')\r\n    const [stadiumName, setStadiumName] = useState('')\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const stadiumMatches = groupBy('Venue_Name')\r\n    let stadiumWiseMatches = stadiumMatches(props.data)\r\n    let stadiumNames = Object.keys(stadiumWiseMatches)\r\n    \r\n    let options = {}\r\n    let series = []\r\n    if(stadiumWiseMatches && stadiumNames) {\r\n\r\n        for(let i=0; i<stadiumNames.length; i++){\r\n            series.push(stadiumWiseMatches[stadiumNames[i]].length)\r\n        }\r\n\r\n        options = {\r\n            labels: stadiumNames,\r\n            title: {\r\n                text: 'Stadium-Wise Match Count'\r\n            },\r\n            legend: {\r\n                show: false,\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    donut: {\r\n                        size: '45%',\r\n                        labels: {\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            chart:{\r\n                events:{\r\n                    dataPointSelection: function(event, chartContext, config) {\r\n                        if(config.dataPointIndex !== undefined){\r\n                            setStadium(stadiumWiseMatches[stadiumNames[config.dataPointIndex]])\r\n                            setStadiumName(stadiumNames[config.dataPointIndex])\r\n                            setOpenPopup(true)\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            responsive: [{\r\n              breakpoint: 1280,\r\n              options: {\r\n                chart: {\r\n                  width: 480,\r\n                }\r\n              },\r\n            },{\r\n              breakpoint: 960,\r\n              options: {\r\n                chart: {\r\n                  width: 550,\r\n                }\r\n              },\r\n            },{\r\n              breakpoint: 600,\r\n              options: {\r\n                chart: {\r\n                  width: 350,\r\n                }\r\n              },\r\n            }]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Grid container justify='center' alignItems='center'>\r\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\r\n                <Grid container justify='center'>\r\n                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                        <Grid container justify='center'>\r\n                            <Chart className={classes.chart} options={options} series={series} type='donut' width='600' height='300'/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                        <Grid container justify='center'>\r\n                            <Typography variant='caption'>Click Chart Segments To View More</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xl={5} lg={5} md={6} sm={12} xs={12} className={classes.smDown}>\r\n                <Grid container justify='center'>\r\n                    <TeamWinLossData data={props.data} />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n            \r\n\r\n            { stadiumName && stadium?\r\n                <CustomPopup titleText={stadiumName} maxWidth={'sm'} open={openPopup} fullWidth={true} handleClose={() => {setOpenPopup(false); setStadium(''); setStadiumName('')}}>\r\n                    <StadiumWiseTeamPerformance data={stadium}/>\r\n                </CustomPopup>\r\n                :null            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport default function TossWinMatchWin(props){\r\n\r\n    let tossData = {}\r\n    for(let i=0; i<props.data.length; i++){\r\n        let winner = props.data[i].Match_Winner_Id\r\n        if(props.data[i].Toss_Winner_Id === winner){\r\n            let teamId = _.get(tossData, winner, '-')\r\n            if(props.data[i].Toss_Decision === 'field'){\r\n                if(teamId !== '-'){\r\n                    tossData[winner] = {...tossData[winner], field: tossData[winner].field + 1}\r\n                } else {\r\n                    tossData[winner] = {bat: 0, field: 1}\r\n                }\r\n            } else {\r\n                if(teamId !== '-'){\r\n                    tossData[winner] = {...tossData[winner], bat: tossData[winner].bat + 1}\r\n                } else {\r\n                    tossData[winner] = {bat: 1, field: 0}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let teamList = Object.keys(tossData)\r\n    let batArray = []\r\n    let fieldArray = []\r\n    teamList.forEach(row => {\r\n        batArray.push(tossData[row].bat)\r\n        fieldArray.push(tossData[row].field)\r\n    })\r\n\r\n    let series = [{ name: 'Bat', data: batArray}, \r\n                 {name: 'Field', data: fieldArray}]\r\n    let options = {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n          },\r\n        },\r\n        stroke: {\r\n          width: 1,\r\n          colors: ['#fff']\r\n        },\r\n        title: {\r\n          text: 'Won Toss And Match'\r\n        },\r\n        xaxis: {\r\n          categories: teamList,\r\n          title:{\r\n            text: 'Match Count'\r\n          },\r\n          labels: {\r\n            formatter: function (val) {\r\n              return val\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Teams'\r\n          },\r\n        },\r\n        tooltip: {\r\n          y: {\r\n            formatter: function (val) {\r\n              return val\r\n            }\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 1\r\n        },\r\n        legend: {\r\n          markers: {\r\n            height: '6px',\r\n            width: '6px',\r\n          },\r\n          itemMargin : {\r\n            horizontal: 20,\r\n          },\r\n          position: 'top',\r\n          horizontalAlign: 'center',\r\n        },\r\n        responsive: [{\r\n          breakpoint: 1280,\r\n          options: {\r\n            chart: {\r\n              width: 420,\r\n              height: 400,\r\n            }\r\n          },\r\n        },{\r\n          breakpoint: 960,\r\n          options: {\r\n            chart: {\r\n              width: 550,\r\n              height: 400,\r\n            }\r\n          },\r\n        },{\r\n          breakpoint: 600,\r\n          options: {\r\n            chart: {\r\n              width: 350,\r\n              height: 400,\r\n            }\r\n          },\r\n        }]\r\n      }\r\n\r\n    return (\r\n        <>\r\n          <Grid container justify='center'>\r\n            <ReactApexChart options={options} series={series} type=\"bar\" width='500' heigth= '400'/>\r\n          </Grid>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport Chart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\n\r\nconst groupBy = key => array =>\r\n  array.reduce((objectsByKeyValue, obj) => {\r\n    const value = obj[key];\r\n    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\r\n    return objectsByKeyValue;\r\n  }, {});\r\n\r\n\r\nexport default function TeamWin(props){\r\n\r\n    const [seasonMatches, setSeasonMatches] = useState([])\r\n    useEffect(() => {\r\n        if(!_.isEmpty(props.data)){\r\n            setSeasonMatches(props.data)\r\n        }\r\n    }, [props.data])\r\n\r\n    let winFunction = groupBy('Match_Winner_Id')\r\n    let winsArray = winFunction(seasonMatches)\r\n    let teamList = Object.keys(winsArray)\r\n\r\n    let options = {}\r\n    let series = []\r\n    if(!_.isEmpty(winsArray) && !_.isEmpty(teamList)) {\r\n\r\n        for(let i=0; i<teamList.length; i++){\r\n            series.push(winsArray[teamList[i]].length)\r\n        }\r\n\r\n        options = {\r\n            labels: teamList,\r\n            title: {\r\n                text: 'Team-Wise Win Chart'\r\n              },\r\n              legend: {\r\n                markers: {\r\n                  height: '6px',\r\n                  width: '6px',\r\n                },\r\n                position: 'bottom',\r\n                itemMargin: {\r\n                  horizontal: 10,\r\n                  vertical: 5,\r\n                }\r\n              },\r\n              responsive: [{\r\n                breakpoint: 1280,\r\n                options: {\r\n                  chart: {\r\n                    width: 400,\r\n                  }\r\n                },\r\n              },{\r\n                breakpoint: 960,\r\n                options: {\r\n                  chart: {\r\n                    width: 550,\r\n                  }\r\n                },\r\n              },{\r\n                breakpoint: 600,\r\n                options: {\r\n                  chart: {\r\n                    width: 350,\r\n                  }\r\n                },\r\n              }]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <Chart options={options} series={series} type='pie' width='600' height='350'/>\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\n\r\nexport default function TeamMatchWiseScores(props){\r\n\r\n    let matches = Object.keys(props.data)\r\n    let teamScorePerMatch = []\r\n    matches.forEach(match => {\r\n        teamScorePerMatch.push(props.data[match]['runs'] + props.data[match]['extras'])\r\n    })\r\n\r\n    let options = {\r\n        chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'straight'\r\n        },\r\n        title: {\r\n          text: 'Team Score Per Match ',\r\n          align: 'left'\r\n        },\r\n        grid: {\r\n          row: {\r\n            colors: ['#f3f3f3', 'transparent'], \r\n            opacity: 0.5\r\n          },\r\n        },\r\n        yaxis: {\r\n          title: {\r\n              text: 'Runs'\r\n          },\r\n        },\r\n        xaxis: {\r\n          title: {\r\n            text: 'Match Count'\r\n          },\r\n        },\r\n        responsive: [{\r\n          breakpoint: 960,\r\n          options: {\r\n            chart: {\r\n              width: 500,\r\n            }\r\n          },\r\n        },{\r\n          breakpoint: 600,\r\n          options: {\r\n            chart: {\r\n              width: 300,\r\n            }\r\n          },\r\n        }]\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <ReactApexChart options={options} series={[{data: teamScorePerMatch}]} type=\"line\" height={350} />\r\n            </Grid>\r\n            \r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\nimport CustomPopup from '../../components/CustomPopup'\r\nimport TeamMatchWiseScores from '../TeamMatchWiseScores'\r\n\r\nexport default function BestTeamPerformance(props){\r\n    \r\n    const [selectedTeam, setSelectedTeam] = useState('')\r\n    const [selectedTeamScores, setSelectedTeamScores] = useState('')\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    let teamsList = Object.keys(props.teamMatchRuns)\r\n    let averageTeamScores = []\r\n    teamsList.forEach(team => {\r\n      let teamsAllMatchScore = _.get(props.teamMatchRuns, team, '-')\r\n      let scoreByMatch = []\r\n      props.matchId.forEach( match => {\r\n        let matchData = _.get(teamsAllMatchScore, match, '-')\r\n        if(matchData !== '-'){\r\n          scoreByMatch.push(matchData.runs + matchData.extras)\r\n        }\r\n      })\r\n      averageTeamScores.push((scoreByMatch.reduce((a, b) => a + b, 0)/scoreByMatch.length).toFixed(2))\r\n    })\r\n\r\n    let options =  {\r\n                    chart: {\r\n                      type: 'bar',\r\n                      height: 350,\r\n                      events:{\r\n                        click: function(event, chartContext, config) {\r\n                          setOpenPopup(true)\r\n                          setSelectedTeam(config.dataPointIndex)\r\n                          setSelectedTeamScores(_.get(props.teamMatchRuns,teamsList[config.dataPointIndex], ''))\r\n                        }\r\n                    }\r\n                    },\r\n                    plotOptions: {\r\n                      bar: {\r\n                        vertical: true\r\n                      }\r\n                    },\r\n                    title: {\r\n                      text: 'Average Run Of Teams'\r\n                    },\r\n                    dataLabels: {\r\n                      enabled: false\r\n                    },\r\n                    xaxis: {\r\n                      categories: teamsList,\r\n                      title: {\r\n                        text: 'Team Names'\r\n                      },\r\n                    },\r\n                    yaxis: {\r\n                      title: {\r\n                        text: 'Runs'\r\n                      },\r\n                    },\r\n                    responsive: [{\r\n                      breakpoint: 1280,\r\n                      options: {\r\n                        chart: {\r\n                          width: 420,\r\n                          heigth: 480,\r\n                        }\r\n                      },\r\n                    },{\r\n                      breakpoint: 960,\r\n                      options: {\r\n                        chart: {\r\n                          width: 400,\r\n                          heigth: 550,\r\n                        }\r\n                      },\r\n                    },{\r\n                      breakpoint: 600,\r\n                      options: {\r\n                        chart: {\r\n                          width: 350,\r\n                          heigth: 350,\r\n                        }\r\n                      },\r\n                    }]\r\n                  }\r\n\r\n    return (\r\n        <>\r\n          <Grid container justify='center'>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                  <Grid container justify='center'>\r\n                    <ReactApexChart options={options} series={[{data: averageTeamScores}]} type=\"bar\" height={350} width={500}/>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                    <Grid container justify='center'>\r\n                        <Typography variant='caption'>Click Chart Segments To View More</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n          </Grid>\r\n          \r\n\r\n\r\n          { selectedTeam !=='' && selectedTeamScores !== ''?\r\n              <CustomPopup titleText={teamsList[selectedTeam]} maxWidth={'sm'} open={openPopup} fullWidth={true} handleClose={() => {setOpenPopup(false); setSelectedTeam(''); setSelectedTeamScores('')}}>\r\n                  <TeamMatchWiseScores data={selectedTeamScores} />\r\n              </CustomPopup>\r\n              :null\r\n          }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\nexport default function BatsmanPerformance(props){\r\n    let matchId = Object.keys(props.data)\r\n\r\n    let runs = []\r\n    let strikeRate = []\r\n    let fours = []\r\n    let sixes = []\r\n    matchId.forEach( match => {\r\n        let matchData = _.get(props.data, match, '-')\r\n        runs.push(matchData.runs)\r\n        strikeRate.push(((matchData.runs/matchData.balls)*100).toFixed(2))\r\n        fours.push(matchData.fours)\r\n        sixes.push(matchData.sixes)\r\n    })\r\n\r\n    let series = [{\r\n        name: 'Strike Rate',\r\n        data: strikeRate\r\n      }, {\r\n        name: 'Runs',\r\n        data: runs\r\n      }, {\r\n        name: 'Fours',\r\n        data: fours\r\n      }, {\r\n        name: 'Sixes',\r\n        data: sixes\r\n      }]\r\n\r\n    let options = {\r\n        chart: {\r\n          type: 'bar',\r\n          height: 350\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            vertical: true,\r\n            columnWidth: '55%',\r\n            endingShape: 'rounded'\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          show: true,\r\n          width: 2,\r\n          colors: ['transparent']\r\n        },\r\n        xaxis: {\r\n          title: {\r\n            text: 'Batting Stats'\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Match'\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 1\r\n        },\r\n        responsive: [{\r\n            breakpoint: 960,\r\n            options: {\r\n              chart: {\r\n                width: 500,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 600,\r\n            options: {\r\n              chart: {\r\n                width: 300,\r\n              }\r\n            },\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <ReactApexChart options={options} series={series} type=\"bar\" height={350} />\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Grid, Typography } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\nimport CustomPopup from '../CustomPopup'\r\nimport BatsmanPerformance from '../BatsmanPerformance'\r\n\r\n\r\nexport default function TopTenBatsman(props){\r\n    let batsmanNames = Object.keys(props.batsmanData)\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [selectedPlayer, setSelectedPlayer] = useState('')\r\n    const [selectedPlayerMatchdata, setSelectedPlayerMatchData] = useState('')\r\n    \r\n    let batsmanAverageRunAndStrikeRate = []\r\n    batsmanNames.forEach(batsman => {\r\n        let battingDataByPlayer = _.get(props.batsmanData, batsman, '-')\r\n        let runScoredByPlayer = []\r\n        let strikeRateByPlayer = []\r\n        props.matchId.forEach(match => {\r\n            let battingDataByPlayerAndMatch = _.get(battingDataByPlayer, match, '-')\r\n            if(battingDataByPlayerAndMatch !== '-'){\r\n                runScoredByPlayer.push(_.get(battingDataByPlayerAndMatch, 'runs', '-'))\r\n                strikeRateByPlayer.push((_.get(battingDataByPlayerAndMatch, 'runs', '-')/(_.get(battingDataByPlayerAndMatch, 'balls', '-'))*100))\r\n            }\r\n        })\r\n        batsmanAverageRunAndStrikeRate.push({'playerId': batsman, 'runs': (runScoredByPlayer.reduce((a, b) => a + b, 0)/runScoredByPlayer.length).toFixed(2),\r\n                                            'strikeRate': (strikeRateByPlayer.reduce((a, b) => a + b, 0)/strikeRateByPlayer.length).toFixed(2)})\r\n    })\r\n    \r\n    batsmanAverageRunAndStrikeRate = _.sortBy(batsmanAverageRunAndStrikeRate, [function(o) { return parseInt(o.runs); }])\r\n\r\n    let topTenId = []\r\n    let topTenRuns = []\r\n    let topTenStrikeRate = []\r\n    for(let i=batsmanAverageRunAndStrikeRate.length - 1; i > batsmanAverageRunAndStrikeRate.length - 11; i--){\r\n        topTenId.push(batsmanAverageRunAndStrikeRate[i].playerId)\r\n        topTenRuns.push(batsmanAverageRunAndStrikeRate[i].runs)\r\n        topTenStrikeRate.push(batsmanAverageRunAndStrikeRate[i].strikeRate)\r\n    }\r\n\r\n    let series = [\r\n        {\r\n          name: 'Runs',\r\n          data: topTenRuns\r\n        },\r\n        {\r\n          name: 'Strike Rate',\r\n          data: topTenStrikeRate\r\n        },\r\n    ]\r\n\r\n    let options = {\r\n        chart: {\r\n          type: 'area',\r\n          height: 300,\r\n          stacked: true,\r\n          events: {\r\n            click: function(event, chartContext, config) {\r\n                if(config.dataPointIndex !== -1){\r\n                  setSelectedPlayer(topTenId[config.dataPointIndex])\r\n                  setSelectedPlayerMatchData(_.get(props.batsmanData, topTenId[config.dataPointIndex], '-'))\r\n                  setOpenPopup(true)\r\n                }\r\n            }\r\n          },\r\n          toolbar: {\r\n            tools:{\r\n            zoomin: false,\r\n            zoomout: false,\r\n            zoom: false,\r\n            pan: false,\r\n            reset: false,\r\n            download: false,\r\n            },\r\n          }\r\n        },\r\n        title: {\r\n            text: 'Top 10 Batsman By Average Run'\r\n        },\r\n        colors: ['#008FFB', '#00E396'],\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          curve: 'smooth'\r\n        },\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            opacityFrom: 0.6,\r\n            opacityTo: 0.8,\r\n          }\r\n        },\r\n        legend: {\r\n          offsetY: -5,\r\n          position: 'top',\r\n          horizontalAlign: 'left',\r\n          markers: {\r\n            height: '6px',\r\n            width: '6px',\r\n          },\r\n          fontSize: '12px',\r\n        },\r\n        xaxis: {\r\n            categories: topTenId,\r\n            title: {\r\n              text: 'Players'\r\n            },\r\n        },\r\n        yaxis: {\r\n            title: {\r\n                text: 'Average Runs'\r\n            },\r\n        },\r\n        responsive: [{\r\n            breakpoint: 1280,\r\n            options: {\r\n              chart: {\r\n                width: 420,\r\n                heigth: 480,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 960,\r\n            options: {\r\n              chart: {\r\n                width: 550,\r\n                heigth: 550,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 600,\r\n            options: {\r\n              chart: {\r\n                width: 350,\r\n                heigth: 350,\r\n              }\r\n            },\r\n          }]\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                    <Grid container justify='center'>\r\n                        <ReactApexChart options={options} series={series} type=\"area\" height={350} width={600} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                    <Grid container justify='center'>\r\n                        <Typography variant='caption'>Click Chart Segments To View More</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n            { selectedPlayer !=='' && selectedPlayerMatchdata !==''?\r\n              <CustomPopup titleText={selectedPlayer} maxWidth={'sm'} open={openPopup} fullWidth={true} handleClose={() => {setOpenPopup(false); setSelectedPlayer(''); setSelectedPlayerMatchData('')}}>\r\n                  <BatsmanPerformance data={selectedPlayerMatchdata} />\r\n              </CustomPopup>\r\n              :null\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\nexport default function BowlerPerformance(props){\r\n    let matchId = Object.keys(props.data)\r\n\r\n    let economies = []\r\n    let overs = []\r\n    let wickets = []\r\n    matchId.forEach( match => {\r\n        let matchData = _.get(props.data, match, '-')\r\n        economies.push((matchData.runs/matchData.balls).toFixed(2))\r\n        overs.push((matchData.balls/6).toFixed(2))\r\n        wickets.push(matchData.wickets)\r\n    })\r\n    \r\n    let series = [{\r\n        name: 'Economy',\r\n        data: economies\r\n      }, {\r\n        name: 'Overs',\r\n        data: overs\r\n      }, {\r\n        name: 'Wickets',\r\n        data: wickets\r\n      }]\r\n\r\n    let options = {\r\n        chart: {\r\n          type: 'bar',\r\n          height: 350\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            vertical: true,\r\n            columnWidth: '55%',\r\n            endingShape: 'rounded'\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          show: true,\r\n          width: 2,\r\n          colors: ['transparent']\r\n        },\r\n        xaxis: {\r\n          title: {\r\n            text: 'Match'\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Count'\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 1\r\n        },\r\n        responsive: [{\r\n            breakpoint: 960,\r\n            options: {\r\n              chart: {\r\n                width: 500,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 600,\r\n            options: {\r\n              chart: {\r\n                width: 300,\r\n              }\r\n            },\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <ReactApexChart options={options} series={series} type=\"bar\" height={350} />\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Grid, Typography, makeStyles } from '@material-ui/core'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport _ from 'lodash'\r\n\r\nimport CustomPopup from '../CustomPopup'\r\nimport BowlerPerformance from '../BowlerPerformance'\r\n\r\nconst useStyles= makeStyles(theme => ({\r\n  xs: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      display: 'none',\r\n  },\r\n  }\r\n}))\r\n\r\n\r\nexport default function TopTenBowler(props){\r\n    const classes = useStyles()\r\n    let bowlerNames = Object.keys(props.bowlerData)\r\n\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [selectedPlayer, setSelectedPlayer] = useState('')\r\n    const [selectedPlayerMatchdata, setSelectedPlayerMatchData] = useState('')\r\n\r\n    let BowlerAverageEconomyAndWicket = []\r\n    bowlerNames.forEach(bowler => {\r\n        let bowlingDataByPlayer = _.get(props.bowlerData, bowler, '-')\r\n        let bowlingEconomy = []\r\n        let wickets = []\r\n        props.matchId.forEach(match => {\r\n            let bowlingDataByPlayerAndMatch = _.get(bowlingDataByPlayer, match, '-')\r\n            if(bowlingDataByPlayerAndMatch !== '-'){\r\n                bowlingEconomy.push(_.get(bowlingDataByPlayerAndMatch, 'runs', '-')/(_.get(bowlingDataByPlayerAndMatch, 'balls', '-')/6))\r\n                wickets.push(_.get(bowlingDataByPlayerAndMatch, 'wickets', '-'))\r\n            }\r\n        })\r\n        BowlerAverageEconomyAndWicket.push({'playerId': bowler, 'runs': (bowlingEconomy.reduce((a, b) => a + b, 0)/bowlingEconomy.length).toFixed(2),\r\n                                            'wickets': (wickets.reduce((a, b) => a + b, 0)/wickets.length).toFixed(2)})\r\n    })\r\n\r\n    BowlerAverageEconomyAndWicket.sort(function (a, b) {\r\n        return a.runs - b.runs || b.wickets - a.wickets;\r\n    });\r\n\r\n    let topTenId = []\r\n    let topTenEconomy = []\r\n    let topTenWicket = []\r\n    for(let i=0; i<10; i++){\r\n        topTenId.push(BowlerAverageEconomyAndWicket[i].playerId)\r\n        topTenEconomy.push(BowlerAverageEconomyAndWicket[i].runs)\r\n        topTenWicket.push(BowlerAverageEconomyAndWicket[i].wickets)\r\n    }\r\n\r\n    let series = [\r\n        {\r\n          name: \"Average Economy\",\r\n          data: topTenEconomy\r\n        },\r\n        {\r\n          name: \"Average Wickets\",\r\n          data: topTenWicket\r\n        }\r\n    ]\r\n\r\n    let options = {\r\n        chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          dropShadow: {\r\n            enabled: true,\r\n            color: '#000',\r\n            top: 18,\r\n            left: 7,\r\n            blur: 10,\r\n            opacity: 0.2\r\n          },\r\n          toolbar: {\r\n            show: false\r\n          },\r\n          events: {\r\n            click: function(event, chartContext, config) {\r\n              if(config.dataPointIndex !== -1){\r\n                setSelectedPlayer(topTenId[config.dataPointIndex])\r\n                setSelectedPlayerMatchData(_.get(props.bowlerData, topTenId[config.dataPointIndex], '-'))\r\n                setOpenPopup(true)\r\n              }\r\n                // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts\r\n            }\r\n          },\r\n        },\r\n        colors: ['#77B6EA', '#545454'],\r\n        dataLabels: {\r\n          enabled: true,\r\n        },\r\n        stroke: {\r\n          curve: 'smooth'\r\n        },\r\n        title: {\r\n          text: 'Average Economy and Wicket',\r\n          align: 'left'\r\n        },\r\n        grid: {\r\n          borderColor: '#e7e7e7',\r\n          row: {\r\n            colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n            opacity: 0.5\r\n          },\r\n        },\r\n        markers: {\r\n          size: 1\r\n        },\r\n        xaxis: {\r\n          categories: topTenId,\r\n          title: {\r\n            text: 'Players'\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: 'Count'\r\n          },\r\n          min: 0,\r\n          max: 10\r\n        },\r\n        \r\n        legend: {\r\n          markers: {\r\n            height: '6px',\r\n            width: '6px',\r\n          },\r\n          fontSize: '12px',\r\n          position: 'top',\r\n          horizontalAlign: 'right',\r\n        },\r\n        responsive: [{\r\n            breakpoint: 1280,\r\n            options: {\r\n              chart: {\r\n                width: 420,\r\n                heigth: 480,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 960,\r\n            options: {\r\n              chart: {\r\n                width: 550,\r\n                heigth: 550,\r\n              }\r\n            },\r\n          },{\r\n            breakpoint: 600,\r\n            options: {\r\n              chart: {\r\n                width: 350,\r\n                heigth: 350,\r\n              }\r\n            },\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='center'>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                    <Grid container justify='center'>\r\n                        <ReactApexChart options={options} series={series} type=\"line\" height={350} width={550}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xl={12} lg={12} md={12} sm={12} xs={12} className={classes.xs}>\r\n                    <Grid container justify='center'>\r\n                        <Typography variant='caption'>Click Chart Segments To View More</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n            { selectedPlayer !=='' && selectedPlayerMatchdata !==''?\r\n              <CustomPopup titleText={selectedPlayer} maxWidth={'sm'} open={openPopup} fullWidth={true} handleClose={() => {setOpenPopup(false); setSelectedPlayer(''); setSelectedPlayerMatchData('')}}>\r\n                  <BowlerPerformance data={selectedPlayerMatchdata} />\r\n              </CustomPopup>\r\n              :null\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Grid, makeStyles, Typography } from '@material-ui/core'\r\nimport classnames from 'classnames'\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    height: {\r\n        height: '100%',\r\n    },\r\n    item: {\r\n      padding: theme.spacing(2),\r\n      backgroundColor: 'white',\r\n      borderRadius: '5px',\r\n      boxShadow: '-6px 6px 1px 0 hsla(0,0%,4%,.1), -4px 4px 0 0 hsla(0,0%,4%,.1)',\r\n      border: '0.2px solid rgba(0,0,0,0.12)',\r\n      flexBasis: '48%',\r\n      height: '46%',\r\n      justifyContent: 'center',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      [theme.breakpoints.down('xs')]: {\r\n        flexBasis: '100%',\r\n        height: 'auto',\r\n        boxShadow: '0 2px 3px hsla(0,0%,4%,.1), 0 0 0 1px hsla(0,0%,4%,.1)',\r\n        border: 'none'\r\n      },\r\n    },\r\n    justifySpaceBetween: {\r\n        justifyContent: 'space-between',\r\n    },\r\n    marginBottom: {\r\n        marginBottom: '3.5%',\r\n        [theme.breakpoints.down('md')]: {\r\n            marginBottom: '15px',\r\n        }\r\n    },\r\n    xs: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginBottom: '15px',\r\n        }\r\n    },\r\n    h3: {\r\n        fontWeight: 600,\r\n        fontSize: '2.5rem',\r\n        letterSpacing: '-1px',\r\n        [theme.breakpoints.down('md')]: {\r\n            fontSize: '1.5rem'\r\n        }\r\n    },\r\n    body2: {\r\n        fontWeight: 500,\r\n        lineHeight: 1.23,\r\n        color: 'rgba(0,0,0,0.6)',\r\n        fontSize: '1.3rem',\r\n        marginTop: '4px',\r\n        [theme.breakpoints.down('md')]: {\r\n            fontSize: '.9rem'\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function StatisticalData(props){\r\n    const classes = useStyles()\r\n\r\n    let teamIds = Object.keys(props.teamMatchRuns)\r\n\r\n    let minTeamScore = 1000, maxTeamScore = 0\r\n    teamIds.forEach(team => {\r\n        let teamData = _.get(props.teamMatchRuns, team, '-')\r\n        if(teamData !== '-'){\r\n            props.matchId.forEach(match => {\r\n                let matchScoreByTeam = _.get(teamData, match, '-').runs + _.get(teamData, match, '-').extras\r\n                if(minTeamScore > matchScoreByTeam){\r\n                    minTeamScore = matchScoreByTeam\r\n                }\r\n                if(maxTeamScore < matchScoreByTeam){\r\n                    maxTeamScore = matchScoreByTeam\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    let batsmanIds = Object.keys(props.batsmanData)\r\n    let maxScore = 0\r\n    batsmanIds.forEach(batsman => {\r\n        let batsmanData = _.get(props.batsmanData, batsman, '-')\r\n        if(batsmanData !== '-'){\r\n            props.matchId.forEach(match => {\r\n                let matchScoreByPlayer = _.get(batsmanData, match, '-').runs\r\n                if(matchScoreByPlayer !== '-'){\r\n                    if(maxScore < matchScoreByPlayer){\r\n                        maxScore = matchScoreByPlayer\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    })\r\n    \r\n    \r\n    let bowlerIds = Object.keys(props.bowlerData)\r\n    let maxWickets = 0\r\n    bowlerIds.forEach(bowler => {\r\n        let bowlerData = _.get(props.bowlerData, bowler, '-')\r\n        if(bowlerData !== '-'){\r\n            props.matchId.forEach(match => {\r\n                let matchWicketsByPlayer = _.get(bowlerData, match, '-').wickets\r\n                if(matchWicketsByPlayer !== '-'){\r\n                    if(maxWickets < matchWicketsByPlayer){\r\n                        maxWickets = matchWicketsByPlayer\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container className={classnames(classes.height, classes.justifySpaceBetween)}>\r\n                <Grid item xl={6} lg={6} sm={6} xs={12} className={classnames(classes.item, classes.marginBottom)}>\r\n                    <Typography variant='h3' className={classes.h3}>{minTeamScore} Runs</Typography>\r\n                    <Typography variant='body2' className={classes.body2}>Least score by a team</Typography>\r\n                </Grid>\r\n                <Grid item xl={6} lg={6} sm={6} xs={12} className={classnames(classes.item, classes.marginBottom)}>\r\n                    <Typography variant='h3' className={classes.h3}>{maxTeamScore} Runs</Typography>\r\n                    <Typography variant='body2' className={classes.body2}>Maximum scored by a team</Typography>\r\n                </Grid>\r\n                <Grid item xl={6} lg={6} sm={6} xs={12} className={classnames(classes.item, classes.xs)}>\r\n                    <Typography variant='h3' className={classes.h3}>{maxScore} Runs</Typography>\r\n                    <Typography variant='body2' className={classes.body2}>Maximum runs by a player</Typography>\r\n                </Grid>\r\n                <Grid item xl={6} lg={6} sm={6} xs={12} className={classnames(classes.item)}>\r\n                    <Typography variant='h3' className={classes.h3}>{maxWickets} Wickets</Typography>\r\n                    <Typography variant='body2' className={classes.body2}>Maximum wickets by a player</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Grid, Typography, Paper, makeStyles, Divider, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core'\r\nimport {ToggleButton, ToggleButtonGroup} from '@material-ui/lab';\r\n\r\n// import Background from '../../static/background1.jpg';\r\n\r\nimport MatchPlayedPerStadium from '../../components/MatchPlayedPerStadium'\r\nimport TossWinMatchWin from '../../components/TossWinMatchWin'\r\nimport TeamWin from '../../components/TeamWin'\r\nimport BestTeamPerformance from '../../components/BestTeamPerformance'\r\nimport TopTenBatsman from '../../components/TopTenBatsman'\r\nimport TopTenBowler from '../../components/TopTenBowler'\r\n\r\nimport { DataCalculater } from '../../helperFunctions'\r\n\r\nimport classnames from 'classnames'\r\nimport StatisticalData from '../../components/StatisticalData';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    padding: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    width: {\r\n      width: '100%',\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    height: {\r\n        height: '350px'\r\n    },\r\n    border: {\r\n        border: '1px solid black'\r\n    },\r\n    mdToXl: {\r\n      [theme.breakpoints.down('sm')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    smToXs: {\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'none',\r\n      }\r\n    },\r\n    xs: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        display: 'none',\r\n      }\r\n    },\r\n    xsplus: {\r\n      [theme.breakpoints.up('xs')]: {\r\n        display: 'none',\r\n      }\r\n    },\r\n    xsDown: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        '& button': {\r\n          display: 'none',\r\n        },\r\n      }\r\n    },\r\n    fontWeight: {\r\n      fontWeight: '600',\r\n    },\r\n    text: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        fontSize: '16px',\r\n        fontWeight: '500',\r\n      }\r\n    },\r\n    textColor: {\r\n      color: 'white',\r\n    },\r\n    background: {\r\n      backgroundColor: '#363636',\r\n    },\r\n    paddingBottom: {\r\n      paddingBottom: theme.spacing(2),\r\n    },\r\n    xsJustify: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        justifyContent: 'center',\r\n      }\r\n    },\r\n    paperBackground: {\r\n      backgroundColor: '#FAFAFA',\r\n    },\r\n    elevation: {\r\n      backgroundColor: 'white',\r\n      borderRadius: '5px',\r\n      marginBottom: '20px',\r\n      boxShadow: '0 2px 3px hsla(0,0%,4%,.1), 0 0 0 1px hsla(0,0%,4%,.1)',\r\n      flexBasis: '49%',\r\n      [theme.breakpoints.down('sm')]: {\r\n        flexBasis: '100%',\r\n      }\r\n    },\r\n    fullCard: {\r\n      backgroundColor: 'white',\r\n      borderRadius: '5px',\r\n      marginBottom: '20px',\r\n      boxShadow: '0 2px 3px hsla(0,0%,4%,.1), 0 0 0 1px hsla(0,0%,4%,.1)',\r\n    },\r\n    item: {\r\n      marginBottom: '20px',\r\n      flexBasis: '49%',\r\n      [theme.breakpoints.down('sm')]: {\r\n        flexBasis: '100%',\r\n      }\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      padding: '1rem',\r\n      backgroundColor: '#FAFAFA',\r\n      [theme.breakpoints.down('sm')]: {\r\n        padding: '1rem 8px',\r\n      }\r\n    },\r\n    formControl: {\r\n      display: 'none',\r\n      [theme.breakpoints.down('xs')]: {\r\n        display: 'block',\r\n      }\r\n    },\r\n    removePadding: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        paddingBottom: '0px',\r\n      }\r\n    },\r\n    remove: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        display: 'none',\r\n      }\r\n    },\r\n    select: {\r\n      padding: '1px 0 0',\r\n      minWidth: '150px',\r\n      '& div': {\r\n        paddingLeft: '5px',\r\n      }\r\n    },\r\n    buttonGroup: {\r\n      '& button[aria-pressed=\"true\"] p': {\r\n        color: 'black',\r\n        fontWeight: 600,\r\n      },\r\n      '& button p': {\r\n        fontWeight: 500,\r\n        color: 'rgba(0,0,0,0.6)',\r\n      }\r\n    },\r\n  })\r\n  )\r\n\r\n\r\nconst yearData = {}\r\n\r\n\r\nexport default function Dashboard(){\r\n    const classes = useStyles()\r\n    const [season, setSeason] = useState(1)\r\n    const yearToSeason = {'2008': 1, '2009': 2, '2010': 3, '2011': 4, '2012': 5, '2013': 6, '2014': 7, '2015': 8, '2016': 9, 'All': 10}\r\n    const seasonKey = Object.entries(yearToSeason)\r\n    \r\n    let matchCount, teamwiseBatting, matchId, batsmanScoreByMatch, bowlerWicketsAndDeliveriesByMatch\r\n\r\n    if(typeof yearData[season] !== 'undefined'){\r\n      matchCount = yearData[season][0]\r\n      teamwiseBatting  = yearData[season][1]\r\n      matchId = yearData[season][2]\r\n      batsmanScoreByMatch = yearData[season][3]\r\n      bowlerWicketsAndDeliveriesByMatch = yearData[season][4]\r\n    } else {\r\n      const matchDataByYear = DataCalculater(season)\r\n      yearData[season] = matchDataByYear\r\n      matchCount = matchDataByYear[0]\r\n      teamwiseBatting = matchDataByYear[1]\r\n      matchId = matchDataByYear[2]\r\n      batsmanScoreByMatch = matchDataByYear[3]\r\n      bowlerWicketsAndDeliveriesByMatch = yearData[season][4]\r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n        <Paper elevation={0} className={classnames(classes.backgroundImage, classes.paperBackground)}>\r\n          <Grid container className={classnames(classes.padding, classes.background, classes.xsJustify)}>\r\n            <Typography className={classnames(classes.textColor, classes.background)} variant={'h6'}>IPL Dashboard</Typography>\r\n          </Grid>\r\n          <Grid container alignItems='center' className={classes.mdToXl}>\r\n  \r\n            <Grid item xl={2} lg={2} md={2}>\r\n              <Grid container alignItems='center' className={classes.padding}>\r\n                <Grid item xl={12} lg={12} md={12} sm={12}>\r\n                  <Grid container justify='center'>\r\n                    <Typography className={classes.fontWeight} variant='body1'>Total Matches</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xl={12} lg={12} md={12} sm={12}>\r\n                  <Grid container justify='center'>\r\n                    <Typography className={classes.fontWeight} variant='body1'>{matchCount.length}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n  \r\n            <Grid item className={classes.flex}>\r\n                <Grid container justify='center'>\r\n                    <ToggleButtonGroup\r\n                    className={classes.buttonGroup}\r\n                    value={season}\r\n                    exclusive\r\n                    onChange={e => setSeason(yearToSeason[e.target.textContent])}\r\n                    aria-label=\"text alignment\"\r\n                    >\r\n                        {\r\n                          seasonKey.map((row, index) => \r\n                            (\r\n                              <ToggleButton key={row[0]} value={row[1]}>\r\n                                  <Typography variant='body2'>{row[0]}</Typography>\r\n                              </ToggleButton>\r\n                            )\r\n                          )\r\n                        }\r\n                    </ToggleButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n  \r\n            <Grid item xl={2} lg={2} md={2}>\r\n              <Grid container alignItems='center' className={classes.padding}>\r\n                <Grid item xl={12} lg={12} md={12} sm={12}>\r\n                  <Grid container justify='center'>\r\n                    <Typography className={classes.fontWeight} variant='body1'>IPL Season</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xl={12} lg={12} md={12} sm={12}>\r\n                  <Grid container justify='center'>\r\n                    {\r\n                      season < 10?\r\n                      <Typography className={classes.fontWeight} variant='body1'>{season}</Typography>\r\n                      :<Typography className={classes.fontWeight} variant='body1'>1-9</Typography>\r\n                    }\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container alignItems='center' className={classes.smToXs}>\r\n            <Grid item sm={12} xs={12} className={classes.padding}>\r\n                <Grid container>\r\n                  <Grid item sm={6} xs={6}>\r\n                    <Grid container>\r\n                      <Typography className={classes.text} variant='h6'>Total Matches: &nbsp;</Typography>\r\n                      <Typography className={classes.text} variant='h6'>{matchCount.length}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={6}>\r\n                    <Grid container justify='flex-end'>\r\n                      <Typography className={classes.text} variant='h6'>IPL Season: &nbsp;</Typography>\r\n                      {\r\n                      season < 10?\r\n                        <Typography className={classes.text} variant='h6'>{season}</Typography>\r\n                        :<Typography className={classes.text} variant='h6'>1-9</Typography>\r\n                      }\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item sm={12} xs={12} className={classnames(classes.paddingBottom, classes.removePadding)}>\r\n              <Grid container justify='center'>\r\n                <ToggleButtonGroup\r\n                className={classnames(classes.xsDown, classes.buttonGroup)}\r\n                value={season}\r\n                exclusive\r\n                onChange={e => setSeason(yearToSeason[e.target.textContent])}\r\n                aria-label=\"text alignment\"\r\n                >\r\n                  {\r\n                    seasonKey.map((row, index) => \r\n                      (\r\n                        <ToggleButton key={row[0]} value={row[1]}>\r\n                            <Typography variant='body2'>{row[0]}</Typography>\r\n                        </ToggleButton>\r\n                      )\r\n                    )\r\n                  }\r\n                </ToggleButtonGroup>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel id=\"season\">Season</InputLabel>\r\n                  <Select\r\n                    className={classes.select}\r\n                    labelId='season'\r\n                    value={season}\r\n                    onChange={e => {\r\n                      setSeason(e.target.value)\r\n                    }}\r\n                    >\r\n                      {\r\n                      seasonKey.map((row) => \r\n                        (\r\n                          <MenuItem className={classes.padding} key={row[0]} value={row[1]}>\r\n                            {row[0]}\r\n                          </MenuItem>\r\n                        )\r\n                      )\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider className={classes.remove}/>\r\n          <Paper elevation={0} className={classes.root}>\r\n            <Grid container justify='space-between'>\r\n              <Grid item xl={12} lg={12} md={12} sm={12} xs={12} className={classnames(classes.padding, classes.fullCard)}>\r\n                <MatchPlayedPerStadium data={matchCount} />\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12} className={classnames(classes.item)}>\r\n                <StatisticalData matchId={matchId} teamMatchRuns={teamwiseBatting}\r\n                 batsmanData={batsmanScoreByMatch} bowlerData={bowlerWicketsAndDeliveriesByMatch}/>\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12} className={classnames(classes.padding, classes.elevation)}>\r\n                <TossWinMatchWin data={matchCount} />\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12} className={classnames(classes.padding, classes.elevation)}>\r\n                <TeamWin data={matchCount} />\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12} className={classnames(classes.padding, classes.elevation)}>\r\n                <BestTeamPerformance teamMatchRuns={teamwiseBatting} matchId={matchId} />\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12} className={classnames(classes.padding, classes.elevation)}>\r\n                <TopTenBatsman batsmanData={batsmanScoreByMatch} matchId={matchId}/>\r\n              </Grid>\r\n              <Grid item xl={6} lg={6} md={6} sm={12} xs={12}  className={classnames(classes.padding, classes.elevation)}>\r\n                <TopTenBowler bowlerData={bowlerWicketsAndDeliveriesByMatch} matchId={matchId} />\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Paper>\r\n      </>\r\n    )\r\n}","import matchData from '../static/Match.json'\r\nimport ballData from '../static/Ball_by_Ball.json'\r\n\r\nimport _ from 'lodash'\r\n\r\nconst groupBy = key => array =>\r\n  array.reduce((objectsByKeyValue, obj) => {\r\n    const value = obj[key];\r\n    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\r\n    return objectsByKeyValue;\r\n}, {});\r\n\r\nexport const DataCalculater = (season) => {\r\n    let matchCount = []\r\n    if(season === 10){\r\n        matchCount = matchData\r\n    } else {\r\n        for (let i = 0; i < matchData.length; i++) {\r\n            if(matchData[i].Season_Id === season){\r\n                matchCount.push(matchData[i])\r\n            }\r\n            if(matchCount.length > 0 && matchData[i].Season_Id !== season){\r\n                break\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    let matchId = matchCount.map(row => row.Match_Id)\r\n    \r\n    const groupByMatch = groupBy('Match_Id')\r\n    let allMatches = groupByMatch(ballData)\r\n\r\n    if(season < 10){\r\n        let seasonMatches = {}\r\n        matchId.forEach(match => {\r\n            let matchData = _.get(allMatches, match, '')\r\n            if(matchData){\r\n                seasonMatches[match] = matchData\r\n            }\r\n        })\r\n        allMatches = seasonMatches\r\n    }\r\n\r\n    let teamwiseBatting = {}\r\n    let batsmanScoreByMatch = {}\r\n    let bowlerWicketsAndDeliveriesByMatch = {}\r\n\r\n    matchId.forEach( match => {\r\n      allMatches[match].forEach(row => {\r\n        let runScored = parseInt(_.get(row, 'Batsman_Scored', 0))\r\n        if(isNaN(runScored)){\r\n          runScored = 0\r\n        }\r\n        let extraRun = _.get(row, 'Extra_Runs', 0)\r\n        let extraType = _.get(row, 'Extra_Type', '-')\r\n        let wicketTaken = _.get(row, 'Dissimal_Type', '-')\r\n        let teamRun = _.get(teamwiseBatting, row.Team_Batting_Id, '-')\r\n        let strikerPerformance = _.get(batsmanScoreByMatch, row.Striker_Id, '-')\r\n        let bowlerPerformance = _.get(bowlerWicketsAndDeliveriesByMatch, row.Bowler_Id, '-')\r\n        if(teamRun !== '-'){\r\n          let matchRun = _.get(teamRun, match, '-')\r\n          if(matchRun !== '-'){\r\n            teamwiseBatting[row.Team_Batting_Id][match] = {runs: matchRun.runs + runScored + extraRun, extras: matchRun.extras + extraRun}\r\n          } else {\r\n            teamwiseBatting[row.Team_Batting_Id][match] = {runs: runScored, extras: extraRun}\r\n          }\r\n        } else {\r\n          teamwiseBatting[row.Team_Batting_Id] = {[match]: {runs: runScored, extras: extraRun}}\r\n        }\r\n\r\n        if(strikerPerformance !== '-'){\r\n          let strikerPerformanceByMatch = _.get(strikerPerformance, match, '-')\r\n          if(strikerPerformanceByMatch !== '-'){\r\n            if(runScored === 4){\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {...strikerPerformanceByMatch, \r\n                                                            runs: strikerPerformanceByMatch.runs + runScored, \r\n                                                            balls: strikerPerformanceByMatch.balls + 1, \r\n                                                            fours: strikerPerformanceByMatch.fours + 1}\r\n            } else if(runScored === 6){\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {...strikerPerformanceByMatch, \r\n                                                            runs: strikerPerformanceByMatch.runs + runScored, \r\n                                                            balls: strikerPerformanceByMatch.balls + 1, \r\n                                                            sixes: strikerPerformanceByMatch.sixes + 1}\r\n            } else {\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {...strikerPerformanceByMatch, \r\n                                                            runs: strikerPerformanceByMatch.runs + runScored, \r\n                                                            balls: strikerPerformanceByMatch.balls + 1}\r\n            }\r\n          } else {\r\n            if(runScored === 4){\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {runs: runScored, balls: 1, fours: 1, sixes: 0}\r\n            } else if(runScored === 6){\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {runs: runScored, balls: 1, fours: 0, sixes: 1}\r\n            } else {\r\n              batsmanScoreByMatch[row.Striker_Id][match] = {runs: runScored, balls: 1, fours: 0, sixes: 0}\r\n            }\r\n          }\r\n        } else {\r\n          if(runScored === 4){\r\n            batsmanScoreByMatch[row.Striker_Id] = {[match]: {runs: runScored, balls: 1, fours: 1, sixes: 0}}\r\n          } else if(runScored === 6){\r\n            batsmanScoreByMatch[row.Striker_Id] = {[match]: {runs: runScored, balls: 1, fours: 0, sixes: 1}}\r\n          } else {\r\n            batsmanScoreByMatch[row.Striker_Id] = {[match]: {runs: runScored, balls: 1, fours: 0, sixes: 0}}\r\n          }\r\n        }\r\n\r\n        if(bowlerPerformance !== '-'){\r\n          let bowlerPerformanceByMatch = _.get(bowlerPerformance, match, '-')\r\n          if(bowlerPerformanceByMatch !== '-'){\r\n            if(extraType === 'noballs' || extraType === 'wides'){\r\n              if(wicketTaken !== ' '){\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {...bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match], \r\n                                                                          runs:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].runs + runScored + extraRun, \r\n                                                                          wickets:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].wickets + 1 }\r\n              } else {\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {...bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match], \r\n                                                                          runs:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].runs + runScored + extraRun}\r\n              }\r\n            } else {\r\n              if(wicketTaken !== ' '){\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {runs:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].runs + runScored + extraRun, \r\n                                                                          wickets:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].wickets + 1, \r\n                                                                          balls:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].balls + 1}\r\n              } else {\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {...bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match], \r\n                                                                          runs:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].runs + runScored + extraRun, \r\n                                                                          balls:bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match].balls + 1}\r\n              }\r\n            }\r\n          } else {\r\n            if(extraType === 'noballs' || extraType === 'wides'){\r\n              if(wicketTaken !== ' '){\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {runs:runScored + extraRun, wickets: 1, balls: 0}\r\n              } else {\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {runs:runScored + extraRun, wickets: 0, balls: 0}\r\n              }\r\n            } else {\r\n              if(wicketTaken !== ' '){\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {runs:runScored + extraRun, wickets: 1, balls: 1}\r\n              } else {\r\n                bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id][match] = {runs:runScored + extraRun, balls: 1, wickets: 0}\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          if(extraType === 'noballs' || extraType === 'wides'){\r\n            if(wicketTaken !== ' '){\r\n              bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id] = {[match]: {runs:runScored + extraRun, wickets: 1, balls: 0}}\r\n            } else {\r\n              bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id] = {[match]: {runs:runScored + extraRun, wickets: 0, balls: 0}}\r\n            }\r\n          } else {\r\n            if(wicketTaken !== ' '){\r\n              bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id] = {[match]: {runs:runScored + extraRun, wickets: 1, balls: 1}}\r\n            } else {\r\n              bowlerWicketsAndDeliveriesByMatch[row.Bowler_Id] = {[match]: {runs:runScored + extraRun, balls: 1, wickets: 0}}\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return ([matchCount, teamwiseBatting, matchId, batsmanScoreByMatch, bowlerWicketsAndDeliveriesByMatch])\r\n}","import React from 'react'\r\nimport Dashboard from './pages/Dashboard'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <>\r\n      <Dashboard />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\n\r\nconst lightTheme = createMuiTheme({\r\n  root: {\r\n    '&$selected': {\r\n      backgroundColor: 'blue',\r\n    },\r\n    button :{\r\n      '&$hover' : {\r\n        backgroundColor : '#4f5f76'\r\n      }\r\n    },\r\n  },\r\n  palette: {\r\n    white: {\r\n      main : '#fff'\r\n    },\r\n    highlightedBlue : {\r\n      main : '#5B6F8A'\r\n    },\r\n    primary: {  \r\n        light: '#4f91cd',\r\n        main: '#19388a',\r\n        dark: '#313d4b',\r\n    },\r\n    secondary: {\r\n      light: '#63ddac',\r\n      main: 'rgba(6, 42, 99, 0.87)',\r\n      dark: '#2a956a'\r\n    },\r\n    almostBlack: {\r\n      light : '#323C47',\r\n      main : '#d5d5dc',\r\n      dark : '#171725'\r\n    },\r\n    subText: {\r\n      main : '#6A6A66',\r\n    }\r\n    // success: {\r\n    //   light: '#9bcf63',\r\n    //   main: '#82c43c',\r\n    //   dark: '#5b892a'\r\n    // },\r\n    // error: {\r\n    //   light: '#fc7b7b',\r\n    //   main: '#fc5a5a',\r\n    //   dark: '#b03e3e'\r\n    // },\r\n    // warning: {\r\n    //   light: '#ffab6e',\r\n    //   main: '#ff974a',\r\n    //   dark: '#b26933'\r\n    // },\r\n    // info: {\r\n    //   light: '#73c3ff',\r\n    //   main: '#50b5ff',\r\n    //   dark: '#387eb2'\r\n    // },\r\n    \r\n    // background: {\r\n    //   paper: '#fff',\r\n    //   default: '#fafafb'\r\n    // },\r\n    // text: {\r\n    //   primary: '#171725',\r\n    //   secondary: '#92929d',\r\n    //   disabled: '#e2e2ea',\r\n    //   hint: '#e2e2ea'\r\n    // }\r\n  },\r\n  // status: {\r\n  //   danger: 'orange',\r\n  // },\r\n  typography: {\r\n    fontFamily: [\r\n      \"Montserrat\",\r\n      \"sans-serif\",\r\n    ].join(','),\r\n  },\r\n});\r\n\r\n\r\n\r\nexport default {\r\n    light:responsiveFontSizes(lightTheme)\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ThemeProvider} from '@material-ui/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport themes from './themes';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={themes.light}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}